def user_encoder(filter_number, filter_size, depth, drop_rate, ker_regul, bias_regul, activation, padding, inpC):
    ' Returns the encoder that is a combination of residual blocks and maxpooling.'        
    e = inpC
    e2 = inpC
    
    for dp in range(depth):
        
        e = keras.layers.SeparableConv1D(filter_number[dp], 
                   filter_size[dp], 
                   padding = padding, 
                   activation = activation,
                   kernel_regularizer = ker_regul,
                   bias_regularizer = bias_regul,
                   )(e)
        
        if(dp%3==0 and dp>0):
            e2 = Conv1D(filter_number[dp], 
                   filter_size[dp], 
                   padding = padding, 
                   activation = activation,
                   kernel_regularizer = ker_regul,
                   bias_regularizer = bias_regul,
                   )(e2)
            e = add([e, e2])
            
        
        e = MaxPooling1D(2, padding = padding)(e)
        e2 = MaxPooling1D(2, padding = padding)(e2)
        
    return(e) 


def user_decoder(filter_number, filter_size, depth, drop_rate, ker_regul, bias_regul, activation, padding, inpC):
    ' Returns the dencoder that is a combination of residual blocks and upsampling. '           
    d = inpC
    d2 = inpC
    
    for dp in range(depth):        
        d = UpSampling1D(2)(d) 
        d2 = UpSampling1D(2)(d2) 
        if dp == 3:
            d = Cropping1D(cropping=(1, 1))(d)
            d2 = Cropping1D(cropping=(1, 1))(d2)
        d = keras.layers.SeparableConv1D(filter_number[dp], 
                   filter_size[dp], 
                   padding = padding, 
                   activation = activation,
                   kernel_regularizer = ker_regul,
                   bias_regularizer = bias_regul,
                   )(d)
        
        if(dp%3==0 and dp>0):
            d2 = Conv1D(filter_number[dp], 
                   filter_size[dp], 
                   padding = padding, 
                   activation = activation,
                   kernel_regularizer = ker_regul,
                   bias_regularizer = bias_regul,
                   )(d2)
            d = add([d, d2])
    
    return(d)  
